# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

#The [main] section for configuring application's SecurityManager
[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
#successfull login redirection page
#shiro.loginUrl = /login.html
#non-authenticated users will be redirected to login.html page
authc.loginUrl = /login.html
authc.successUrl = /mainPage.jsp
logout.redirectUrl = /login.html

#custom realms
myRealm = package edu.eventorganizer.auth.realm.MyRealm

#Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#base64 encoding
sha256Matcher.storedCredentialsHexEncoded = false
sha256Matcher.hashIterations = 1024

myRealm.credentialsMatcher = $sha256Matcher

#permissions
myRealm.permissionsLookupEnabled = false

#connection to db
ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = root
ds.databaseName = event_organizer_guice
jdbcRealm.dataSource = $ds

#use build-in cache manager
buildInCacheManager = org.apache.shiro.MemoryConstrainedCacheManager
securityManager.cacheManager = $buildInCacheManager

securityManager.realms = $myRealm

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/ = anon
/registration = anon
#every resource within /auth/ requires the user to be authenticated
#/auth/** = authc
/login = authc
#/login = authc <- make sure user is authenticated, if not, redirect to authc.loginUrl, and after successfull auth redicert back to page user whant to reach
/logout = logout
#/account/** = authc
#/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]